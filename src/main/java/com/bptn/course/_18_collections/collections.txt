
COLLECTIONS
***********

Definition:

A Java Collection is a data structure.

A Data Structure, is data organized in a particular way plus a set operations such as read, 
insert, update, delete, sort, etc, to perform on these data.  

Generally speaking, there is no such thing as the best data structure,
but specific data structures perform better than others, depending on the situation.

A Java Collection is comprised of objects of the same type (same as in Arrays)


Linus Torvalds

"Bad programmers worry about the code. 
 Good programmers worry about data structures and their relationships."

 
LISTS
*****

- Keep the insertion order
- Accepts duplicates


- Types

1. ArrayList:
   - Backed by Arrays
   - Java creates a new internal Array to hold elements if more space is needed.
   - Are faster (elements in sequence)
   - Perform better than LinkedList if we don't need to modify a long list frequently (insert, remove).

2. LinkedList
   - Double linked chain of nodes.
   - Are slower (double links)
   - Perform better than ArrayList if we need to modify a long list frequently (insert, remove).
   
   
SETS
****

- Don't keep the insertion order
- All the elements must be unique

- Types

1. HashSet - Doesn't keep the insertion order
           - Implements Hash Algorithm

2. LinkedHashSet - Keeps the insertion order.
                 - Implements Hash Algorithm.
                 - Less performance as it uses internally:
                   - HashSet
                   - LinkedList


3. TreeSet - Sorts the elements
           - Implements red-black tree algorithm.
           - Less performance as it sorts the elements
           

MAPS
****

- A map is a set of ordered pairs, each pair contains a key and a value. In a map,
all keys are required to be unique, the values can be repeated.

- Maps have three primary methods: one to add a specified key-value pairs, one to 
retrieve the value for a given key, and one to remove a key-value pair from the map.

- Maps are very useful when we need to search by a key.
- An Entry is a (key, value) pairing.

Types

1. HashMap - Doesn't keep the insertion order
           - Implements the Hash Algorithm

2. LinkedHashMap - Keeps the insertion order
                 - Implements the Hash Algorithm
                 - Less performance as it uses internally:
                   - HashMap
                   - LinkedList            

3. TreeMap - Sorts the elements by key
           - Implements red-black tree algorithm.
           - Less performance as it sorts the elements by key.



